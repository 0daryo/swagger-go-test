// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	swag "github.com/go-openapi/swag"
)

// GetBrandsHandlerFunc turns a function with the right signature into a get brands handler
type GetBrandsHandlerFunc func(GetBrandsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetBrandsHandlerFunc) Handle(params GetBrandsParams) middleware.Responder {
	return fn(params)
}

// GetBrandsHandler interface for that can handle valid get brands params
type GetBrandsHandler interface {
	Handle(GetBrandsParams) middleware.Responder
}

// NewGetBrands creates a new http.Handler for the get brands operation
func NewGetBrands(ctx *middleware.Context, handler GetBrandsHandler) *GetBrands {
	return &GetBrands{Context: ctx, Handler: handler}
}

/*GetBrands swagger:route GET /brands getBrands

GetBrands get brands API

*/
type GetBrands struct {
	Context *middleware.Context
	Handler GetBrandsHandler
}

func (o *GetBrands) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetBrandsParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// GetBrandsOKBody get brands o k body
// swagger:model GetBrandsOKBody
type GetBrandsOKBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this get brands o k body
func (o *GetBrandsOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetBrandsOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetBrandsOKBody) UnmarshalBinary(b []byte) error {
	var res GetBrandsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
